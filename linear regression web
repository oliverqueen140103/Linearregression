import numpy as np
import pandas as pd
import plotly.express as px
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import SGDRegressor

medical_df = pd.read_csv(r"C:\Users\Oliver\Downloads\insurance (1).csv")
medical_df.info()
medical_df.describe()
sns.set_style('darkgrid')
matplotlib.rcParams['font.size'] = 14
matplotlib.rcParams['figure.figsize'] = (10, 6)
matplotlib.rcParams['figure.facecolor'] = '#00000000'
medical_df.age.describe()
fig = px.histogram(medical_df,
                   x='age',
                   marginal='box',
                   nbins=47,
                   title='Distribution of Age')
fig.update_layout(bargap=0.1)
fig.show()
fig = px.histogram(medical_df,
                   x='bmi',
                   marginal='box',
                   color_discrete_sequence=['red'],
                   title='Distribution of BMI (Body Mass Index)')
fig.update_layout(bargap=0.1)
fig.show()
fig = px.histogram(medical_df,
                   x='charges',
                   marginal='box',
                   color='smoker',
                   color_discrete_sequence=['red', 'grey'],
                   title='Annual Medical Charges')
fig.update_layout(bargap=0.1)
fig.show()
fig = px.histogram( medical_df,
                    x='charges',
                    color='sex',
                    color_discrete_sequence=["blue", "red"],
                    title='Different charges over genders'

                    )
fig.update_layout( bargap=0.1 )
fig.show()
fig = px.histogram(medical_df,
                  x = "charges",
                  marginal = 'box',
                   color="region",
                  title = "charges over different regions of U.S.A")
fig.update_layout(bargap=0.1)
fig.show()
medical_df.smoker.value_counts()
px.histogram(medical_df, x='smoker', color='sex', title='Smoker')
fig = px.histogram(medical_df,
                  x = 'charges',
                   marginal ="box",
                  color = 'children',
                  title = 'charges incurred by children')
fig.update_layout(bargap=0.1)
fig.show()
fig = px.scatter(medical_df,
                 x='age',
                 y='charges',
                 color='smoker',
                 opacity=0.8,
                 hover_data=['sex'],
                 title='Age vs. Charges')
fig.update_traces(marker_size=5)
fig.show()
fig = px.scatter(medical_df,
                 x='bmi',
                 y='charges',
                 color='smoker',
                 opacity=0.8,
                 hover_data=['sex'],
                 title='BMI vs. Charges')
fig.update_traces(marker_size=5)
fig.show()
px.violin(medical_df,x = 'children',y = 'charges')
sns.barplot(data = medical_df,x = 'sex',y = 'charges',hue = "smoker")
px.histogram(medical_df,x='sex',y = 'charges',color = 'region')
medical_df.charges.corr(medical_df.age)
medical_df.charges.corr(medical_df.bmi)
medical_df.children.corr(medical_df.charges)
smoker_values = {'no': 0, 'yes': 1}
smoker_numeric = medical_df.smoker.map(smoker_values)
medical_df.charges.corr(smoker_numeric)
medical_df.corr()
sns.heatmap(medical_df.corr(), cmap='Blues', annot=True)
plt.title('Correlation Matrix');
non_smoker_df = medical_df[medical_df.smoker == 'no']
plt.title('Age vs. Charges')
sns.scatterplot(data=non_smoker_df, x='age', y='charges', alpha=0.7, s=15);
def estimate_charges(age, w, b):
    return w * age + b
w = 50
b = 100
estimate_charges(30,w,b)
ages = non_smoker_df.age
estimated_charges = estimate_charges(ages, w, b)
estimated_charges
non_smoker_df.charges
plt.scatter(ages, estimated_charges);
plt.plot(ages,estimated_charges,'r-o')
plt.xlabel('Age');
plt.ylabel('Estimated Charges');
target = non_smoker_df.charges

plt.plot(ages, estimated_charges, 'r', alpha=0.9);
plt.scatter(ages, target, s=8,alpha=0.8);
plt.xlabel('Age');
plt.ylabel('Charges')
plt.legend(['Estimate', 'Actual']);

def rmse(targets, predictions):
    return np.sqrt(np.mean(np.square(targets - predictions)))
w = 50
b = 100
try_parameters(w, b)
targets = non_smoker_df['charges']
predicted = estimate_charges(non_smoker_df.age, w, b)
rmse(targets, predicted)

def try_parameters(w, b):
    ages = non_smoker_df.age
    target = non_smoker_df.charges
    predictions = estimate_charges(ages, w, b)

    plt.plot(ages, predictions, 'r', alpha=0.9)
    plt.scatter(ages, target, s=8, alpha=0.8)
    plt.xlabel('Age')
    plt.ylabel('Charges')
    plt.legend(['Prediction', 'Actual'])

    loss = rmse(target, predictions)
    print("RMSE Loss:", loss)

# Corrected indentation for the following calls
try_parameters(60, 200)
try_parameters(400, 5000)
try_parameters(350, -700)

# The rest of your code...


model = LinearRegression()
inputs = non_smoker_df[['age']]
targets = non_smoker_df.charges
print( 'inputs.shape :', inputs.shape )
print( 'targes.shape :', targets.shape )
model.fit( inputs, targets )
predictions = model.predict( inputs )
rmse( targets, predictions )
model1 = SGDRegressor()
model1.fit( inputs, targets )
predictions = model1.predict( inputs )
rmse( targets, predictions )
smoker_df = medical_df[medical_df.smoker == 'yes']
inputs = smoker_df[['age']]
targets = smoker_df.charges
print( '', inputs.shape )
print( '', targets.shape )
model.fit( inputs, targets )
predicted = model.predict( inputs )
print( 'RMSE:', )
rmse( targets, predicted )
